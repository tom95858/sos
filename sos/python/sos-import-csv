#!/usr/bin/env python
from __future__ import print_function
import time
import sys
import argparse
from sosdb import Sos
import struct
import json
import gzip

def fileopener(fn):
    """return the correct open function for the filename (default or gzip.open)"""
    if fn.endswith(".gz") or fn.endswith(".GZ"):
        return gzip.open
    return open

def pack_it(cols, fmt, idx_ary):
    vals = []
    for spec in idx_ary:
        if type(spec) == unicode:
            try:
                arg = int(float(spec))
            except:
                arg = spec
        else:
            arg = int(float(cols[spec]))
        vals.append(arg)
    if len(vals) == 1:
        return vals[0]
    tpl = tuple(v for v in vals)
    return struct.pack(fmt, *tpl)

def make_combo(fmt, ary):
    return lambda cols: pack_it(cols, fmt, ary)

def make_lambda(attr, col_no):
    t = attr.type()
    if t < Sos.TYPE_FLOAT:
        return lambda cols: int(cols[col_no])
    elif t < Sos.TYPE_TIMESTAMP:
        return lambda cols: float(cols[col_no])
    return lambda cols: cols[col_no]

def make_value(attr, value):
    t = attr.type()
    if t < Sos.TYPE_FLOAT:
        return lambda cols: int(value)
    elif t < Sos.TYPE_TIMESTAMP:
        return lambda cols: float(value)
    return lambda cols: value

def make_cast(attr):
    t = attr.type()
    if t == Sos.TYPE_INT16:
        return lambda s : int(s)
    elif t == Sos.TYPE_INT32:
        return lambda s : int(s)
    elif t == Sos.TYPE_INT64:
        return lambda s : int(s)
    elif t == Sos.TYPE_UINT16:
        return lambda s : int(s)
    elif t == Sos.TYPE_UINT32:
        return lambda s : int(s)
    elif t == Sos.TYPE_UINT64:
        return lambda s : int(s)
    elif t == Sos.TYPE_FLOAT:
        return lambda s : float(s)
    elif t == Sos.TYPE_DOUBLE:
        return lambda s : float(s)
    elif t == Sos.TYPE_LONG_DOUBLE:
        return lambda s : float(s)
    elif t == Sos.TYPE_TIMESTAMP:
        return lambda s : float(s)
    elif t == Sos.TYPE_CHAR_ARRAY:
        return lambda s : str(s)
    raise ValueError("{0} is an unsupported cast".format(repr(t)))

def assign(obj, line, cast, args):
    # print("assigning attr_id {0} = {1}".format(args[0], line[args[1]]))
    obj[args[0]] = cast(line[args[1]])

def setter(obj, line, cast, args):
    # print("setting attr_id {0} = {1}".format(args[0], args[1]))
    obj[args[0]] = cast(args[1])

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Query metric data in a container")
    parser.add_argument("--path", required=True,
                        help="The path to the container.")
    parser.add_argument("--schema", required=True,
                        help="The schema defining the objects being imported")
    parser.add_argument("--map",
                        help="Specifies how CSV columns are mapped to attributes")
    parser.add_argument("--csv",
                        help="The path to the CSV file to import. May be gzipped.")
    parser.add_argument("--status", action="store_true",
                        help="Show detail import status")
    args = parser.parse_args()

    cont = Sos.Container()
    try:
        cont.open(args.path)
    except Exception as ex:
        print("The database '{0}' could not be opened.".format(args.path))
        sys.exit(1)

    mf = open(args.map, 'r')
    imap = []                   # an entry for each column
    spec = {}

    schema = cont.schema_by_name(args.schema)
    print("Importing from CSV file {0} into {1} using map {2}".format(args.csv, args.path, args.map))

    try:
        mapspec = json.load(mf)
    except Exception as ex:
        print("{0}".format(repr(ex)))
        sys.exit(1)

    input_process = []
    for spec in mapspec:
        action = spec['action']
        a = []
        fn_args = spec['args']
        if action == "assign" or action == "set":
            if type(fn_args[0]) == int:
                attr_id = fn_args[0]
                attr = schema.attr_by_id(attr_id)
            else:
                attr = schema.attr_by_name(fn_args[0])
                attr_id = attr.attr_id()
            a.append(attr_id)
            if fn_args[1] == -1:
                last_col += 1
                fn_args[1] = last_col
            else:
                last_col = fn_args[1]
            a.append(fn_args[1])
            if action == "assign":
                input_process.append([assign, make_cast(attr), a])
            else:
                input_process.append([setter, make_cast(attr), a])
        else:
            raise ValueError("Error processing {0}".format(spec))

    df = fileopener(args.csv)(args.csv, 'r')
    count = 0
    t0 = time.time()
    new_recs = 0
    obj = None
    for l in df:
        if l.endswith("\n"):
            l = l[:-1]
        cols = l.split(',')
        obj = schema.alloc()
        if not obj:
            print("An object with schema {0} could not be allocated.".format(schema.name()))
            sys.exit(1)
        for action in input_process:
            try:
                action[0](obj, cols, action[1], action[2])
            except Exception as ex:
                print("An exception occurred parsing the CSV input.")
                print("Exception Detail : {0}".format(ex))
                print("Action           : {0}".format(action))
                sys.exit(1)

        if obj:
            obj.index_add()
            del obj
            obj = None

        count += 1
        if args.status:
            new_recs += 1.
            t1 = time.time()
            t = t1 - t0
            if t > 5.0:
                print("{0} records/second".format(new_recs / t))
                new_recs = 0.
                t0 = t1

    cont.close()
    print("Created {0} records".format(count))
