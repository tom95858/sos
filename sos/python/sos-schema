#!/usr/bin/env python
from __future__ import print_function
import datetime as dt
import sys
import numpy as np
import argparse
from sosdb import Sos
import json
import gzip

def fileopener(fn):
    """return the correct open function for the filename (default or gzip.open)"""
    if fn.endswith(".gz") or fn.endswith(".GZ"):
        return gzip.open
    return open

def query_schema(cont, schema_name, verbose=False):
    count = 0
    for s in cont.schema_iter():
        if s.name() != schema_name and schema_name != "ALL":
            continue
        count += 1
        print(s.name())
        if verbose:
            print("{0:4} {1:16} {2:12} {3:32}".format("Id", "Type", "Indexed", "Name"))
            print("{0} {1} {2} {3}".\
                  format('-'.ljust(4, '-'), '-'.ljust(16,'-'),
                         '-'.ljust(12,'-'), '-'.ljust(32,'-')))
            for a in s:
                if a.is_indexed():
                    idx_s = "True"
                else:
                    idx_s = ""
                aname = a.name()
                type_name = a.type_name()
                if a.type() == Sos.TYPE_STRUCT:
                    type_name += '[' + str(a.size()) + ']'
                elif a.type() == Sos.TYPE_JOIN:
                    idl = a.join_list()
                    aname += ' ['
                    comma = False
                    for i in idl:
                        jattr = s.attr_by_id(i)
                        if comma:
                            aname += '+'
                        comma = True
                        aname += jattr.name()
                    aname += ']'
                print("{0:4} {1:16} {2} {3}".\
                      format(a.attr_id(), type_name,
                             idx_s.ljust(12,' '), aname))
    if count == 0:
        if schema_name != "ALL":
            print("The schema '{0}' was not found.".format(schema_name))

def add_schema(cont, path):
    try:
        fp = fileopener(path)(path, 'r')
        spec = json.load(fp)
        schema = Sos.Schema()
        schema.from_template(spec['name'], spec['attrs'])
        schema.add(cont)
    except Exception as ex:
        print(str(ex))

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Query metric data in a container")
    parser.add_argument("-p", "--path", required=True, dest="path",
                        help="The path to the container.")
    parser.add_argument("-q", "--query", metavar="SCHEMA-NAME", dest="query",
                        help="Query a container's schema. Specify 'ALL' to see all schema. "
                        "Use the --verbose option to display all schema attributes")
    parser.add_argument("-v", "--verbose", action="store_true", dest="verbose",
                        help="Display all of the schema's attributes.")
    parser.add_argument("-a", "--add", metavar="JSON-FILE", dest="add",
                        help="Add the schema defined in the JSON-FILE to the container. JSON-FILE may be gzipped.")
    args = parser.parse_args()

    if not args.query and not args.add:
        print("One or both of the --query or --add options must be specified.")
        sys.exit(1)

    try:
        cont = Sos.Container()
        cont.open(args.path)
    except:
        print("The container {0} could not be opened.".format(args.path))
        sys.exit(1)

    if args.query:
        query_schema(cont, args.query, verbose=args.verbose)

    if args.add:
        add_schema(cont, args.add)

